function varargout = {{functionname}}(varargin)
% Function for the TensorFlow operator named {{operatorname}}.
% 
% You must implement this function because the TensorFlow importer was unable 
% to generate MATLAB code corresponding to the {{operatorname}} TensorFlow 
% operator.
% 
% To implement this function, follow these steps::
% 1) If you imported this network using Deep Network Designer, first check that 
%    the network input sizes are correct. Next, fix any issues that occur before 
%    the layer in the network that calls this function. For more information about 
%    issues with the network, check the import report in Deep Network Designer.
% 2) Look up 'tf.raw_ops.{{operatorname}}' in the TensorFlow
%    documentation to find out what the operator does.
% 3) Implement the TensorFlow operator in one of these ways:
%    b. Replace the custom layers that call this function with built-in layers
%       from Deep Learning Toolbox. Consult the documentation for a list of layers:
%       https://www.mathworks.com/help/deeplearning/ug/list-of-deep-learning-layers.html
%    a. If there is no equivalent built-in layer, write MATLAB code that is equivalent 
%       to the TensorFlow operator in this function. In some cases, you can use 
%       built-in dlarray operations to help write the function. 
%       For a list of built-in operations, see:
%       https://www.mathworks.com/help/deeplearning/ug/list-of-functions-with-dlarray-support.html
% 4) If you are viewing this network inside Deep Network Designer, you can 
%    debug this function by putting breakpoints in this file, and pressing 
%    the 'Analyze' button in Deep Network Designer. If you are not viewing 
%    this network inside Deep Network Designer, call 
%    analyzeNetwork(myNetwork) to achieve the same effect.
% 5) When you have finished editing the function, remove the error call at 
%    the bottom of the function before using the network.
%
% Inputs: 
%   Each input argument is a struct with fields:
%       value: Input data
%        rank: Number of dimensions of the input data, including any
%              trailing dimensions, specified as a scalar.
%   Most functions will have a single input. Some functions can have multiple inputs 
%   if the original TensorFlow operator expects multiple inputs. If a function requires 
%   multiple inputs, then varargin{1} is the first input, varargin{2} is the second input, and so on.
%
% Outputs:
%   Each output argument is a structure array with fields:
%       value: Input data
%        rank: Number of dimensions of the input data, including any
%              trailing dimensions, specified as a scalar.
%
% Most functions will have a single output. Some functions can have multiple 
% output if the original TensorFlow operator returns multiple outputs. If a 
% function returns multiple outputs, then varargout{1} is the first output, 
% varargout{2} is the second output, and so on.

%% Do Not Edit - Code Generated by TensorFlow Importer
% This code permutes the dimensions of the inputs into TensorFlow ordering and 
% data format labels are removed. When you implement the rest of this function, assume that 
% the dimensions of the arrays are in the same order that they appear in the 
% original TensorFlow model.
%{{import_statement}}
inputs = cell(1,nargin);
[inputs{:}] = permuteToTFDimensionOrder(varargin{:});

%% Do Not Edit - Code Generated by TensorFlow Importer
% This code creates a cell array for the outputs.
outputs = cell(1,nargout);

%% To Do - Implement Function
% Write code to implement the function here. The results must be assigned 
% to a cell array named 'outputs' where each element is a structure array  
% containing the values of the output and rank. For example, if the first 
% output has value Y with Yrank number of dimensions, then 
% outputs{1} = struct('value',Y,'rank',Yrank);

%% To Do - Delete Error 
% After you have implemented the function, delete the error below before using the network.
error(message('nnet_cnn_kerasimporter:keras_importer:PlaceholderFunction', '{{functionname}}', '{{functionfilename}}'));

%% Do Not Edit - Code Generated by TensorFlow Importer
% This code permutes the dimensions of the outputs into reverse-TensorFlow
% ordering, if the outputs do not have data format labels or are not dlarrays. 
varargout = cell(1,nargout);
[varargout{:}] = permuteToReverseTFDimensionOrder(outputs{:});
end